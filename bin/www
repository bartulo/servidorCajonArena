#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('prueba:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var im = require('imagemagick');
const fetch = require('node-fetch');
const Jimp = require('jimp');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

async function rotate( file, mapa, tipo ) {
  const image = await Jimp.read( file );
  image.rotate( -mapa.ang * 180 / 3.14 )
  .crop( mapa.offsetx, mapa.offsety, 1920, 1080 )
  .write( `${tipo}.png` );

}

async function loadFile( url ) {
  const r = await fetch( url );
  const buffer = await r.buffer();
  return buffer;
}

async function writeMDT( url, tipo, mapa ) {
  return new Promise( resolve => {
    let f = fs.createWriteStream('mdt.tiff');
    const r =  fetch( url )
    .then( ( res ) => {
      res.body.pipe( f )
    });
    f.on( 'finish', resolve );
  });
  
}

async function rotateMDT( url, tipo, mapa ) {
  const w = await writeMDT( url, tipo, mapa )
  .then( () => {
    console.log( mapa );
    const ang = mapa.ang * 180 / Math.PI; 
    im.convert( [ 'mdt.tiff', '-rotate', ang, 'r.tiff' ], function( err, stdout ) {
      console.log( stdout );
    });
  });

}  

async function writeImage( url, tipo, mapa ) {
  const d = await loadFile( url )
  .then( ( buffer ) => {
    rotate( buffer, mapa, tipo )
    .then( () => {
      console.log( 'leido' );
    });
  });
}

const loadData = async function( mapa ) {
  const topo = await writeImage(`https://www.ign.es/wms-inspire/mapa-raster?request=GetMap&service=WMS&version=1.3.0&layers=mtn_rasterizado&styles=&crs=epsg:25830&bbox=${mapa.minx},${mapa.miny},${mapa.maxx},${mapa.maxy}&width=${mapa.width}&height=${mapa.height}&format=image/png`, 'topo', mapa);
  const pnoa = await writeImage(`https://www.ign.es/wms-inspire/pnoa-ma?request=GetMap&service=WMS&version=1.3.0&layers=OI.OrthoimageCoverage&styles=&crs=epsg:25830&bbox=${mapa.minx},${mapa.miny},${mapa.maxx},${mapa.maxy}&width=${mapa.width}&height=${mapa.height}&format=image/png`, 'pnoa', mapa);
  const mdt = await rotateMDT(`https://servicios.idee.es/wcs-inspire/mdt?version=2.0.1&request=GetCoverage&service=WCS&coverageId=Elevacion25830_5&subset=Long(${mapa.minx},${mapa.maxx})&subset=Lat(${mapa.miny},${mapa.maxy})&format=image/tiff`, 'mdt', mapa);
}

const clientes = async function( io ) {
  const c = await io.fetchSockets();

  let proyector = false;
  let escenario = null;
  let pid = 0;
  c.forEach( elem => {
    if ( elem.data.tipo === 'proyector' ) {
      proyector = true;
      escenario = elem.data.escenario;
      pid = elem.data.pid;
    }
  });
  return { proyector: proyector, escenario: escenario, pid: pid };
}

let pidG = 0;

io.on( 'connection', ( socket ) => {

  clientes( io ).then( ( v ) => {
    socket.emit('onload', v );
  });
  socket.on('data', ( elem ) => {
    socket.data.tipo = elem.tipo;
    socket.data.escenario = elem.escenario;
    socket.data.pid = pidG;
    socket.data.room = elem.room;
    if ( elem.room != 'master' ) {
      socket.join( elem.room );
    }
  });
  socket.on('tecla', ( tecla ) => {
    socket.broadcast.emit( 'tecla', tecla );
  });
  socket.on('linea', ( positions ) => {
    socket.broadcast.emit( 'linea', positions );
  });
  socket.on('icon', ( coords ) => {
    socket.broadcast.emit( 'icon', coords );
  });
  socket.on('remove', ( id ) => {
    socket.broadcast.emit( 'remove', id );
  });
  socket.on('playVideo', ( ) => {
    socket.broadcast.emit( 'playVideo' );
  });
  socket.on('pauseVideo', ( ) => {
    socket.broadcast.emit( 'pauseVideo' );
  });
  socket.on('skipTo', ( skipTo ) => {
    socket.broadcast.emit( 'skipTo', skipTo );
  });
  socket.on('openBrowser', (e) => {
    process.env['DISPLAY'] = ':0';
    var spawn = require('child_process').spawn
    var child = spawn("firefox", ["-private-window", "--kiosk", "http://localhost:3000/app/proyector/" + e], {detached: true});
    var pidof = child.pid;
    socket.data.pid = pidof;
    pidG = pidof;
    io.emit('opened', {pid: pidof, escenario: e});
  });
  socket.on('stop', (pid) => {
    var exec = require('child_process').exec;
    var child = exec('xdotool search "Mozilla Firefox" windowactivate --sync key --clearmodifiers ctrl+q');
    //process.kill(-pid);
  });
  socket.on('mostrarRoom', (room) => {
    socket.broadcast.emit( 'mostrarRoom', room );
  });
  socket.on('solicitud', (texto) => {
    socket.broadcast.emit('solicitud');
  });

  socket.on('solicitudAceptada', (data) => {
    socket.broadcast.emit('solicitudAceptada', data);
  });

  socket.on('disconnect', () => {
    if ( socket.data.tipo === 'proyector' ) {
      socket.broadcast.emit( 'out' );
    }
  });

  socket.on('mapa', ( mapa ) => {
    loadData( mapa );
  });
    
});
